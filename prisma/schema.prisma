generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model developer_organizations {
  developer_id  String        @db.Uuid
  app_id        String        @db.Uuid
  role          String        @db.VarChar
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  updated_at    DateTime?     @default(now()) @db.Timestamp(6)
  deleted_at    DateTime?     @db.Timestamp(6)
  organizations organizations @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)
  developers    developers    @relation(fields: [developer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([developer_id, app_id])
}

model developers {
  id                      String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                    String?                   @unique @db.Citext
  email                   String?                   @unique @db.Citext
  password_hash           String?                   @db.VarChar
  api_token               String?                   @unique @db.VarChar
  is_active               Boolean?                  @default(true)
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  deleted_at              DateTime?                 @db.Timestamp(6)
  developer_organizations developer_organizations[]
  tokens                  tokens[]
  user_profiles           user_profiles[]
  users                   users[]
}

model organizations {
  app_id                  String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  app                     String                    @unique @db.Citext
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  deleted_at              DateTime?                 @db.Timestamp(6)
  developer_organizations developer_organizations[]
  users                   users[]
}

model password_reset_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  token      String    @unique @db.VarChar
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model permissions {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String             @unique @db.Citext
  description      String?            @db.VarChar
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?          @db.Timestamp(6)
  role_permissions role_permissions[]
}

model role_permissions {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role_id       String?      @db.Uuid
  permission_id String?      @db.Uuid
  created_at    DateTime?    @default(now()) @db.Timestamp(6)
  updated_at    DateTime?    @default(now()) @db.Timestamp(6)
  deleted_at    DateTime?    @db.Timestamp(6)
  permissions   permissions? @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles?       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model roles {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String             @unique @db.Citext
  description      String?            @db.VarChar
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?          @db.Timestamp(6)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model tokens {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String?     @db.Uuid
  developer_id String?     @db.Uuid
  token        String      @unique @db.VarChar
  expires_at   DateTime?   @db.Timestamp(6)
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  updated_at   DateTime?   @default(now()) @db.Timestamp(6)
  deleted_at   DateTime?   @db.Timestamp(6)
  type         String      @db.VarChar
  developers   developers? @relation(fields: [developer_id], references: [id], onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_profiles {
  user_id             String      @id @db.Uuid
  developer_id        String?     @db.Uuid
  first_name          String      @db.VarChar
  last_name           String      @db.VarChar
  phone_number        String?     @db.VarChar
  address             String?     @db.VarChar
  profile_picture_url String?     @db.VarChar
  created_at          DateTime?   @default(now()) @db.Timestamp(6)
  updated_at          DateTime?   @default(now()) @db.Timestamp(6)
  deleted_at          DateTime?   @db.Timestamp(6)
  developers          developers? @relation(fields: [developer_id], references: [id], onUpdate: NoAction)
  users               users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_roles {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  role_id    String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  roles      roles?    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                       String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  developer_id             String?                 @db.Uuid
  organization_id          String?                 @db.Uuid
  email                    String                  @unique @db.Citext
  password_hash            String                  @db.VarChar
  first_name               String                  @db.VarChar
  last_name                String                  @db.VarChar
  user_type                String?                 @db.VarChar
  is_logged_in             Boolean?                @default(false)
  last_login               DateTime?               @db.Timestamp(6)
  is_active                Boolean?                @default(true)
  password_reset_token     String?                 @db.VarChar
  reset_token_expires_at   DateTime?               @db.Timestamp(6)
  created_at               DateTime?               @default(now()) @db.Timestamp(6)
  updated_at               DateTime?               @default(now()) @db.Timestamp(6)
  deleted_at               DateTime?               @db.Timestamp(6)
  email_verification_token String?                 @db.VarChar
  email_verified           Boolean?                @default(false)
  otp_tokens               otp_tokens[]
  password_reset_tokens    password_reset_tokens[]
  tokens                   tokens[]
  user_profiles            user_profiles?
  user_roles               user_roles[]
  developers               developers?             @relation(fields: [developer_id], references: [id], onUpdate: NoAction)
  organizations            organizations?          @relation(fields: [organization_id], references: [app_id], onUpdate: NoAction)
}

model otp_tokens {
  id         String   @id @default(uuid())
  user_id    String   @db.Uuid
  otp        String
  expires_at DateTime
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
